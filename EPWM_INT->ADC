//
// Included Files
//

#include "F28x_Project.h"
#include "math.h"
#include "stdlib.h"
#include "string.h"
#include "float.h"

//
// Function Prototypes
//
void SetupADCContinuous(void);
void ConfigureEPWM2(void);
void ConfigureEPWM6(void);
void PLL(void);
interrupt void adca1_isr(void);
interrupt void xint1_isr(void);
void ConfigureIntPwm(void);
void ConfigureADC(void);

//
// Globals
//
Uint16 Duty = 320;
Uint16 AdcaResults;
static double x;
static double wtQ15pi=0;  /* wt -1 to 1*/
//  static double sinQ15=0;
static double sinQ15r=0; /* PLL internal sin */
static double cosQ15r=0; /* PLL internal cos */
static double VinQ15=0;
static double edQ15_0=0;
static double edQ15_1=0;
static double edQ15_2=0;
static double wtQ15pi_0=0;
static double wtQ15pi_1=0;
static double wtQ15pi_2=0;
static double AoQ15_0=0;
static double AoQ15_1=0; // -0.7 in Q15
static double AiQ15_0=0;
static double AiQ15_1=0;   // just an value different from zero
static double eQ15=0;
static double  EPwm2TZIntCount;


void main(void)
{
//
// Step 1. Initialize System Control:
// PLL, WatchDog, enable Peripheral Clocks
// This example function is found in the F2837xS_SysCtrl.c file.
//


    InitSysCtrl();

//
// Step 2. Initialize GPIO:
// This example function is found in the F2837xS_Gpio.c file and
// illustrates how to set the GPIO to it's default state.
//
    InitGpio(); // Skipped for this example
    InitEPwm2Gpio();
    InitEPwm6Gpio();

//
// Step 3. Clear all interrupts and initialize PIE vector table:
// Disable CPU interrupts
//
    DINT;

//
// Initialize the PIE control registers to their default state.
// The default state is all PIE interrupts disabled and flags
// are cleared.
// This function is found in the F2837xS_PieCtrl.c file.
//
    InitPieCtrl();

//
// Disable CPU interrupts and clear all CPU interrupt flags:
//
    IER = 0x0000;
    IFR = 0x0000;

//
// Initialize the PIE vector table with pointers to the shell Interrupt
// Service Routines (ISR).
// This will populate the entire table, even if the interrupt
// is not used in this example.  This is useful for debug purposes.
// The shell ISR routines are found in F2837xS_DefaultIsr.c.
// This function is found in F2837xS_PieVect.c.
//
    InitPieVectTable();

//
// Map ISR functions
//
    EALLOW;
    PieVectTable.EPWM2_INT = &adca1_isr; //function for EPWM2 interrupt 1
    PieVectTable.EPWM2_INT = &adca1_isr; //function for ADCA interrupt 1
    PieVectTable.XINT1_INT = &xint1_isr;
    PieVectTable.XINT2_INT = &xint1_isr;
    EDIS;

//
// Configure the ADC and power it up
//
    SetupADCContinuous();
    ConfigureADC();

    //Setup the ADCs for software conversions
    //
//
// Configure the ePWM
//
    ConfigureEPWM2();
    ConfigureEPWM6();
    ConfigureIntPwm();
//
// enable PIE interrupt
//
    PieCtrlRegs.PIECTRL.bit.ENPIE = 1;
    PieCtrlRegs.PIEIER3.bit.INTx2 = 1;
    PieCtrlRegs.PIEIER1.bit.INTx4 = 1;          // Enable PIE Group 1 INT4
    PieCtrlRegs.PIEIER1.bit.INTx5 = 1;          // Enable PIE Group 1 INT5


    IER |= M_INT3; //Enable group 3 interrupts
    IER |= M_INT1; //Enable group 1 interrupts
    EINT;  // Enable Global interrupt INTM
    ERTM;  // Enable Global realtime interrupt DBGM

    EALLOW;
    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 1;
    EDIS;

    EALLOW;
    GpioCtrlRegs.GPAMUX2.bit.GPIO18 = 0;
    GpioCtrlRegs.GPADIR.bit.GPIO18 = 1;
    EDIS;

    EALLOW;

    GpioCtrlRegs.GPAMUX2.bit.GPIO20 = 0;         // GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO20 = 0;          // input
    GpioCtrlRegs.GPAQSEL2.bit.GPIO20 = 3;        // XINT1 Synch to SYSCLKOUT only

    GpioCtrlRegs.GPAMUX2.bit.GPIO21 = 0;         // GPIO
    GpioCtrlRegs.GPADIR.bit.GPIO21 = 0;          // input
    GpioCtrlRegs.GPAQSEL2.bit.GPIO21 = 3;        // XINT1 Synch to SYSCLKOUT only

    EDIS;


    // GPIO12 is XINT3, GPIO13 is XINT4 PIN 40 / 39 34 / 33

    GPIO_SetupXINT1Gpio(20);
    GPIO_SetupXINT2Gpio(21);

    //
    // Configure XINT1
    //
       XintRegs.XINT1CR.bit.POLARITY = 0;          // falling edge interrupt
       XintRegs.XINT2CR.bit.POLARITY = 0;          // falling edge interrupt

    //
    // Enable XINT1 and XINT2
    //
       XintRegs.XINT1CR.bit.ENABLE = 1;            // Enable XINT1
       XintRegs.XINT2CR.bit.ENABLE = 1;            // Enable XINT2


     while(1);

}

interrupt void xint1_isr(void)
{

    EPwm2TZIntCount++;

//    while(1);

    asm("   ESTOP0");

    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

void ConfigureADC(void)
{
    EALLOW;

    //
    //write configurations
    //
    AdcaRegs.ADCCTL2.bit.PRESCALE = 6; //set ADCCLK divider to /4
    AdcSetMode(ADC_ADCA, ADC_RESOLUTION_12BIT, ADC_SIGNALMODE_SINGLE);

    //
    //Set pulse positions to late
    //
    AdcaRegs.ADCCTL1.bit.INTPULSEPOS = 1;

    //
    //power up the ADC
    //
    AdcaRegs.ADCCTL1.bit.ADCPWDNZ = 1;

    //
    //delay for 1ms to allow ADC time to power up
    //
    DELAY_US(1000);
    EDIS;
}
    void SetupADCContinuous(void)
    {

        EALLOW;
        AdcaRegs.ADCSOC0CTL.bit.CHSEL  = 0;  //SOC will convert on channel
        AdcaRegs.ADCSOC0CTL.bit.ACQPS  = 14;    //sample window is acqps +

        AdcaRegs.ADCINTSEL1N2.bit.INT1E = 0; //disable INT1 flag
        AdcaRegs.ADCINTSEL1N2.bit.INT1CONT = 1;
        AdcaRegs.ADCINTSEL1N2.bit.INT1SEL = 0;  //end of SOC0 will set INT1 flag

        AdcbRegs.ADCSOC0CTL.bit.CHSEL  = 1;  //SOC will convert on channel
        AdcbRegs.ADCSOC0CTL.bit.ACQPS  = 14;    //sample window is acqps +
        AdcbRegs.ADCINTSEL1N2.bit.INT1E = 0; //disable INT1 flag
        AdcbRegs.ADCINTSEL1N2.bit.INT1CONT = 1;
        AdcbRegs.ADCINTSEL1N2.bit.INT1SEL = 0;  //end of SOC0 will set INT1 flag
        EDIS;

}

//
// ConfigureEPWM - Configure EPWM2
//

void ConfigureEPWM2(void)
{
    //
      // Setup TBCLK
      //
      EPwm2Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN; // Count updown
      EPwm2Regs.TBPRD = 620;       // Set timer period - 620 counts 40kHz
      EPwm2Regs.TBCTL.bit.PHSEN = 0;    // Disable phase loading
      EPwm2Regs.TBPHS.bit.TBPHS = 0x0000;        // Phase is 0
      EPwm2Regs.TBCTR = 0x0000;                  // Clear counter
      EPwm2Regs.TBCTL.bit.HSPCLKDIV = 0x0000    ;   // Clock ratio to SYSCLKOUT
      EPwm2Regs.TBCTL.bit.CLKDIV = 0x0000;

      //
      // Setup shadow register load on ZERO
      //
      EPwm2Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
      EPwm2Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
      EPwm2Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO;
      EPwm2Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO;

      //
      // Set Compare values
      //
      EPwm2Regs.CMPA.bit.CMPA = 310;      // 310 50%
      EPwm2Regs.CMPB.bit.CMPB = 310;      // 310 50%

      //
      // Set actions
      //
      EPwm2Regs.AQCTLA.bit.CAU = AQ_SET;         // Set PWM2A on event A, up
                                                 // count
      EPwm2Regs.AQCTLA.bit.CBD = AQ_CLEAR;       // Clear PWM2A on event B, down
                                                 // count
      EPwm2Regs.AQCTLB.bit.CAU = AQ_SET;         // Set PWM2A on event A, up
                                                 // count
      EPwm2Regs.AQCTLB.bit.CBD = AQ_CLEAR;       // Clear PWM2A on event B, down
                                                 // count

      //DEADBAND - não necessário para chave de alta frequência
//      EPwm2Regs.DBCTL.bit.IN_MODE = 2;
//      EPwm2Regs.DBCTL.bit.POLSEL = 2;
//      EPwm2Regs.DBCTL.bit.OUT_MODE = 3;
//      EPwm2Regs.DBRED.bit.DBRED = 75;
//      EPwm2Regs.DBFED.bit.DBFED = 75;
}
void ConfigureEPWM6(void)
{
    //
      // Setup TBCLK
      //
      EPwm6Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN; // Count updown
      EPwm6Regs.TBPRD = 52083;   //52083     // Set timer period - 0x249F00 counts 60Hz
      EPwm6Regs.TBCTL.bit.PHSEN = 0;    // Disable phase loading
      EPwm6Regs.TBPHS.bit.TBPHS = 0x0000;        // Phase is 0
      EPwm6Regs.TBCTR = 0x0000;                  // Clear counter
      EPwm6Regs.TBCTL.bit.HSPCLKDIV = 0x0000    ;   // Clock ratio to SYSCLKOUT
      EPwm6Regs.TBCTL.bit.CLKDIV = 3; //0

      //
      // Setup shadow register load on ZERO
      //
      EPwm6Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
      EPwm6Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
      EPwm6Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO;
      EPwm6Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO;

      //
      // Set Compare values
      //
      EPwm6Regs.CMPA.bit.CMPA = 26041;      // ‭124F80‬ 50%
      EPwm6Regs.CMPB.bit.CMPB = 26041;      // ‭124F80‬ 50%

      //
      // Set actions
      //
      EPwm6Regs.AQCTLA.bit.CAU = AQ_SET;         // Set PWM2A on event A, up
                                                 // count
      EPwm6Regs.AQCTLA.bit.CBD = AQ_CLEAR;       // Clear PWM2A on event B, down
                                                 // count
      EPwm6Regs.AQCTLB.bit.CBU = AQ_CLEAR;         // Set PWM2A on event A, up
                                                 // count
      EPwm6Regs.AQCTLB.bit.CAD = AQ_SET;       // Clear PWM2A on event B, down
                                                 // count

      //DEADBAND - ATENCAO: NAO FOI TESTADO,  necessario para a chave de baixa frequencia
//
//      EPwm6Regs.DBCTL.bit.IN_MODE = 2;
//      EPwm6Regs.DBCTL.bit.POLSEL = 2;
//      EPwm6Regs.DBCTL.bit.OUT_MODE = 3;
//      EPwm6Regs.DBRED.bit.DBRED = 10;
//      EPwm6Regs.DBFED.bit.DBFED = 10;
}

void ConfigureIntPwm(void)
{
    EPwm2Regs.ETSEL.bit.INTEN = 1;        // Enable EPWMx_INT generation
    EPwm2Regs.ETSEL.bit.INTSEL= 2;      //Enable event time-base counter equal to period (TBCTR = TBPRD)
    EPwm2Regs.ETSEL.bit.INTSELCMP=0;
    EPwm2Regs.ETPS.bit.INTPRD = 1;          // Generate pulse on 1st event
    EPwm2Regs.ETPS.bit.INTPSSEL = 0;        // Generate pulse on 1st event
    EPwm2Regs.ETCLR.bit.INT = 1;
    EPwm2Regs.ETFLG.bit.INT = 0;
}


interrupt void adca1_isr(void)
{

int16 PeriodCount=0;

        GpioDataRegs.GPATOGGLE.bit.GPIO18 = 1;
        AdcaRegs.ADCINTSEL1N2.bit.INT1E = 1;
        AdcbRegs.ADCINTSEL1N2.bit.INT1E = 1;
        AdcaRegs.ADCSOCFRC1.bit.SOC0 = 1;
        AdcbRegs.ADCSOCFRC1.bit.SOC1 = 1;
        EALLOW;
        AdcaRegs.ADCINTSEL1N2.bit.INT1E = 0;
        AdcbRegs.ADCINTSEL1N2.bit.INT1E = 0;
        EDIS;

        VinQ15 =(AdcbResultRegs.ADCRESULT1);

        Duty = (AdcaResultRegs.ADCRESULT0)*620/4095;
        EPwm2Regs.CMPA.bit.CMPA = Duty;
        EPwm2Regs.CMPB.bit.CMPB = Duty;

//        EPwm6Regs.CMPA.bit.CMPA = Duty;      // ‭124F80‬ 50%
//        EPwm6Regs.CMPB.bit.CMPB = Duty;      // ‭124F80‬ 50%

        EALLOW;
        EPwm2Regs.ETCLR.bit.INT = 1;
        EPwm2Regs.ETFLG.bit.INT = 0;
        EDIS;

        PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;


//        if(PeriodCount<2400000)   // 6x60Hz periods to stabilize the PLL
//        {
//            EPwm6Regs.CMPA.bit.CMPA = Duty;
//
//            if (VinQ15>120) // only starts to count if Vin>120Vpk
//            {
//                        PeriodCount++;
//            }
//        }

        //EPWM_TRIP_ZONE.C



//        EPwm2TZIntCount++;

//#define PI M_PI
//#define toQ15 pow(2,15)



//    g_nStepCount++;

   // In case of error, uncomment next two lines. Set *pnError to 1 and copy Error message to szErrorMsg
    //*pnError=1;
    //strcpy(szErrorMsg, "Place Error description here.");




    sinQ15r = sin(wtQ15pi_0*3.14);
    cosQ15r = cos(wtQ15pi_0*3.14);


   eQ15 = VinQ15 - (AoQ15_0*cosQ15r); // erro

   AiQ15_0 =  eQ15*cosQ15r;   // OK

   //   AoQ15_x       0.01 + 0.01 z^-1
   //   --------  =  --------------------
   //   AiQ15_x            1 - z^-1

   AoQ15_0 = AoQ15_1; // + AiQ15_0*0.01;
   AoQ15_0 = AoQ15_0 + AiQ15_1*0.01;


   edQ15_0 =eQ15*sinQ15r;

   // wtQ15pi_x    0.02 + 20e-05 z^-1 - 0.02 z^-2
   //  ------------ =  --------------------------------------
   //  edQ15_x               1 - 2 z^-1 + z^-2

   wtQ15pi_0 = edQ15_1*0.0002;

   wtQ15pi_0 = wtQ15pi_0+(wtQ15pi_1*2) - wtQ15pi_2 + (edQ15_0*0.02);
   wtQ15pi_0 = wtQ15pi_0 - edQ15_2*0.02;


   // Update variables
   AoQ15_1 = AoQ15_0;
   AiQ15_1 = AiQ15_0;

   wtQ15pi_2 = wtQ15pi_1;
   wtQ15pi_1 = wtQ15pi_0;

   edQ15_2 = edQ15_1;
   edQ15_1 = edQ15_0;


    wtQ15pi_0 = wtQ15pi_0 + 0.25; // Wff  erro aqui, colocar depois dos updates;

//    sinQ15 = sin((wtQ15pi_0- 0.5)*3.14);   // to become -cos(x);

    // sinQ15 = sin(wtQ15pi*PI);



//    out[0]=  sinQ15;
//    out[1]=  wtQ15pi_0;  // time
//    out[2]=AoQ15_0;   // time step
//
     x =-180*cos(wtQ15pi*3.14);
//
//    if (x>0)
//   {
//   out[3]=1;
//   out[4]=0;
//   }
//   if (x<0)
//   {
//   out[3]=1;
//   out[4]=0;
//   }

     GpioDataRegs.GPATOGGLE.bit.GPIO18 = 1;

}



//
// End of file
//
